package assets

import (
	"os"
	"time"
	"bytes"
	"net/http"
	"fmt"
	"strings"
	"log"
)

var filexyz *assetFileInfo = &assetFileInfo{name: "/index.html", data: []byte{60, 104, 116, 109, 108, 62, 10, 32, 32, 32, 32, 60, 98, 111, 100, 121, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 84, 101, 115, 116, 32, 70, 105, 108, 101, 10, 32, 32, 32, 32, 60, 47, 98, 111, 100, 121, 62, 10, 60, 47, 104, 116, 109, 108, 62, 10}}
var fileabc *assetFileInfo = &assetFileInfo{name: "/index2.html", data: []byte{60, 104, 116, 109, 108, 62, 10, 32, 32, 32, 32, 60, 98, 111, 100, 121, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 84, 101, 115, 116, 32, 70, 105, 108, 101, 10, 32, 32, 32, 32, 60, 47, 98, 111, 100, 121, 62, 10, 60, 47, 104, 116, 109, 108, 62, 10}}
var filebcd *assetFileInfo = &assetFileInfo{name: "/main.go.src", data: []byte{112, 97, 99, 107, 97, 103, 101, 32, 109, 97, 105, 110, 10, 10, 105, 109, 112, 111, 114, 116, 32, 40, 10, 9, 34, 102, 109, 116, 34, 10, 9, 34, 108, 111, 103, 34, 10, 10, 9, 34, 103, 105, 116, 104, 117, 98, 46, 99, 111, 109, 47, 115, 112, 102, 49, 51, 47, 97, 102, 101, 114, 111, 34, 10, 41, 10, 10, 102, 117, 110, 99, 32, 109, 97, 105, 110, 40, 41, 32, 123, 10, 9, 100, 97, 116, 97, 44, 32, 101, 114, 114, 32, 58, 61, 32, 97, 102, 101, 114, 111, 46, 82, 101, 97, 100, 70, 105, 108, 101, 40, 70, 115, 44, 32, 34, 47, 105, 110, 100, 101, 120, 46, 104, 116, 109, 108, 34, 41, 10, 9, 105, 102, 32, 101, 114, 114, 32, 33, 61, 32, 110, 105, 108, 32, 123, 10, 9, 9, 108, 111, 103, 46, 70, 97, 116, 97, 108, 40, 101, 114, 114, 41, 10, 9, 125, 10, 9, 102, 109, 116, 46, 80, 114, 105, 110, 116, 102, 40, 34, 37, 115, 34, 44, 32, 100, 97, 116, 97, 41, 10, 125, 10}}
var filecde *assetFileInfo = &assetFileInfo{name: "/js/jquery.min.js", data: []byte{47, 42, 33, 32, 106, 81, 117, 101, 114, 121, 32, 118, 51, 46, 51, 46, 49, 32, 124, 32, 40, 99, 41, 32, 74, 83, 32, 70, 111, 117, 110, 100, 97, 116, 105, 111, 110, 32, 97, 110, 100, 32, 111, 116, 104, 101, 114, 32, 99, 111, 110, 116, 114, 105, 98, 117, 116, 111, 114, 115, 32, 124, 32, 106, 113, 117, 101, 114, 121, 46, 111, 114, 103, 47, 108, 105, 99, 101, 110, 115, 101, 32, 42, 47, 10, 33, 102, 117, 110, 99, 116, 105, 111, 110, 40, 101, 44, 116, 41, 123, 34, 117, 115, 101, 32, 115, 116, 114, 105, 99, 116, 34, 59, 34, 111, 98, 106, 101, 99, 116, 34, 61, 61, 116, 121, 112, 101, 111, 102, 32, 109, 111, 100, 117, 108, 101, 38, 38, 34, 111, 98, 106, 101, 99, 116, 34, 61, 61, 116, 121, 112, 101, 111, 102, 32, 109, 111, 100, 117, 108, 101, 46, 101, 120, 112, 111, 114, 116, 115, 63, 109, 111, 100, 117, 108, 101, 46, 101, 120, 112, 111, 114, 116, 115, 61, 101, 46, 100, 111, 99, 117, 109, 101, 110, 116, 63, 116, 40, 101, 44, 33, 48, 41, 58, }}

var dirabc *assetFileInfo = &assetFileInfo{name: "/js", dir: true}

var fileData = map[string]*assetFileInfo{
	"/index.html": filexyz,
	"/index2.html": fileabc,
	"/main.go.src": filebcd,
	"/js/jquery.min.js": filecde,
}

func fileHasPrefix(p string) bool {
	for v, _ := range fileData {
		if strings.HasPrefix(p, v) {
			return true
		}
	}
	return false
}

func fileStat(name string) *assetFileInfo {
	return &assetFileInfo{
		name: name,
		datalen: int64(len(fileData[name])),
		dir: false,
	}
}

func dirStat(name string) *assetFileInfo {
	return &assetFileInfo{
		name: name,
		datalen: 0,
		dir: true,
	}
}

func fileList(p string) []*assetFileInfo {
	o := []assetFileInfo{}
	// sp := []strings{}
	for v, _ := range fileData {
		if strings.HasPrefix(p, v) {
			s := v[len(p):]
			if !strings.Contains(s, "/") {
				o = append(o, fileStat(v))
			} else {
				sl := strings.Split(s, "/")
				// sp = append(sp, sl[0])
				o = append(o, dirStat(fmt.Sprintf("%s/%s", p, sl[0])))
			}
		}
	}
	return o
}

type FS struct {
}

func (a FS) Open(name string) (http.File, error) {
	log.Printf("Open(): %s", name)
	if v, ok := fileData[name]; ok {
		f := &assetFile{
			Reader: bytes.NewReader(v),
			info: fileStat(name),
		}
		log.Printf("Returning file: %s", name)
		return f, nil
	} else if fileHasPrefix(name) {
		d := dirStat(name)
		return d, nil
	}

	log.Printf("File not found: %s", name)
	return nil, os.ErrNotExist
}

type assetFileInfo struct {
	name string
	dir bool
	data []byte
}

func (f assetFileInfo) Name() string       {
	log.Printf("[%s] ModTime()", f.name)
	return f.name
}
func (f assetFileInfo) Size() int64        {
	log.Printf("[%s] ModTime()", f.name)
	return len(data)
}
func (f assetFileInfo) Mode() os.FileMode  {        // Read for all
	log.Printf("[%s] ModTime()", f.name)
	return 0444
}
func (f assetFileInfo) ModTime() time.Time { // Return anything
	log.Printf("[%s] ModTime()", f.name)
	return time.Time{} 
}
func (f assetFileInfo) IsDir() bool        { 
	log.Printf("[%s] IsDir()", f.name)
	return f.dir 
}
func (f assetFileInfo) Sys() interface{}   {
	log.Printf("[%s] ModTime()", f.name)
	return nil
}

type assetFile struct {
	*bytes.Reader
	info assetFileInfo
}

func (a *assetFile) Stat() (os.FileInfo, error) {
	log.Printf("[%s] Stat()", a.info.Name())
    return a.info, nil
}

func (a *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	log.Printf("[%s] Readdir()", a.info.Name())
	if a.info.IsDir() {
		return fileList(a.info.Name()), nil
	}
	return nil, nil
}

func (a *assetFile) Close() error {
	log.Printf("[%s] Close()", a.info.Name())
	return nil
}
